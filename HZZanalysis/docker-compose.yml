version: '3.9'

services:
  rabbitmq:
    image: rabbitmq:3-management
    ports:
      - "5672:5672"
      - "15672:15672"
    networks:
      - task_network
    environment:
      RABBITMQ_DEFAULT_USER: guest
      RABBITMQ_DEFAULT_PASS: guest
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "-q", "ping"]
      interval: 10s
      retries: 10

  producer:
    image: cw4
    build:
      context: .  # Path to Dockerfile
    command: python producer.py ${HREF}
    environment:
      - HREF=${HREF:-"https://atlas-opendata.web.cern.ch/atlas-opendata/samples/2020/4lep/"}
    networks:
      - task_network
    depends_on:
      rabbitmq:
        condition: service_healthy

  consumer:
    image: cw4
    build:
      context: .  # Path to Dockerfile
    command: python consumer.py
    environment:
      - RABBITMQ_URL=amqp://rabbitmq:5672
      - NUM_CONSUMERS=${NUM_CONSUMERS:-1}
    networks:
      - task_network
    deploy:
      replicas: ${NUM_CONSUMERS:-1}
    depends_on:
      rabbitmq:
        condition: service_healthy
    volumes:
      - ./logs:/app/logs


  collector:
    image: cw4
    build:
      context: . # Path to Dockerfile
    command: python collector.py
    networks:
      - task_network
    environment:
      - RABBITMQ_URL=amqp://rabbitmq:5672
    depends_on:
      rabbitmq:
        condition: service_healthy
      consumer:
        condition: service_started
    volumes:
      - ./logs:/app/logs
      - ./shutdown.sh:/app/shutdown.sh
      - /var/run/docker.sock:/var/run/docker.sock

networks:
  task_network:
    driver: bridge
